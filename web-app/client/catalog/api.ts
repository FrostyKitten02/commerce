/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CreateProductDto
 */
export interface CreateProductDto {
    /**
     * 
     * @type {string}
     * @memberof CreateProductDto
     */
    'sku'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductDto
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateProductDto
     */
    'price'?: number;
}
/**
 * 
 * @export
 * @interface CreateProductReq
 */
export interface CreateProductReq {
    /**
     * 
     * @type {CreateProductDto}
     * @memberof CreateProductReq
     */
    'product': CreateProductDto;
    /**
     * 
     * @type {File}
     * @memberof CreateProductReq
     */
    'file'?: File;
}
/**
 * 
 * @export
 * @interface GetProductRes
 */
export interface GetProductRes {
    /**
     * 
     * @type {ProductDto}
     * @memberof GetProductRes
     */
    'product'?: ProductDto;
    /**
     * 
     * @type {Array<ProductDto>}
     * @memberof GetProductRes
     */
    'products'?: Array<ProductDto>;
}
/**
 * 
 * @export
 * @interface ProductDto
 */
export interface ProductDto {
    /**
     * 
     * @type {string}
     * @memberof ProductDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductDto
     */
    'sku'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductDto
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductDto
     */
    'price'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductDto
     */
    'pictureId'?: string;
}
/**
 * 
 * @export
 * @interface ProductListRes
 */
export interface ProductListRes {
    /**
     * 
     * @type {Array<ProductDto>}
     * @memberof ProductListRes
     */
    'products'?: Array<ProductDto>;
}
/**
 * 
 * @export
 * @interface ResourceCreatedRes
 */
export interface ResourceCreatedRes {
    /**
     * 
     * @type {string}
     * @memberof ResourceCreatedRes
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface UpdateProductDto
 */
export interface UpdateProductDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateProductDto
     */
    'sku'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProductDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProductDto
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateProductDto
     */
    'price'?: number;
}
/**
 * 
 * @export
 * @interface UpdateProductReq
 */
export interface UpdateProductReq {
    /**
     * 
     * @type {UpdateProductDto}
     * @memberof UpdateProductReq
     */
    'product': UpdateProductDto;
    /**
     * 
     * @type {File}
     * @memberof UpdateProductReq
     */
    'file'?: File;
}

/**
 * ProductCatalogApi - axios parameter creator
 * @export
 */
export const ProductCatalogApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new product with details and optional image upload. Requires admin privileges.
         * @summary Create new product
         * @param {CreateProductReq} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct: async (body: CreateProductReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createProduct', 'body', body)
            const localVarPath = `/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (body !== undefined) {
                for (const [key, value] of Object.entries(body)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Permanently delete a product from the catalog. Requires admin privileges.
         * @summary Delete product
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct: async (productId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('deleteProduct', 'productId', productId)
            const localVarPath = `/products/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve detailed information about a specific product by its unique identifier
         * @summary Get product by ID
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct: async (productId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getProduct', 'productId', productId)
            const localVarPath = `/products/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve multiple products by providing a list of product IDs as query parameters
         * @summary Get products by IDs
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProducts: async (ids: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('getProducts', 'ids', ids)
            const localVarPath = `/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Completely replace existing product with new data. Requires admin privileges.
         * @summary Replace product
         * @param {string} productId 
         * @param {CreateProductReq} createProductReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceProduct: async (productId: string, createProductReq: CreateProductReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('replaceProduct', 'productId', productId)
            // verify required parameter 'createProductReq' is not null or undefined
            assertParamExists('replaceProduct', 'createProductReq', createProductReq)
            const localVarPath = `/products/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProductReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve list of all available products in the catalog with pagination support
         * @summary Search all products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchProducts: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update existing product with new data and optional image. Requires admin privileges.
         * @summary Update product
         * @param {UpdateProductReq} body 
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct: async (body: UpdateProductReq, productId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateProduct', 'body', body)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('updateProduct', 'productId', productId)
            const localVarPath = `/products/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (body !== undefined) {
                for (const [key, value] of Object.entries(body)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductCatalogApi - functional programming interface
 * @export
 */
export const ProductCatalogApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductCatalogApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new product with details and optional image upload. Requires admin privileges.
         * @summary Create new product
         * @param {CreateProductReq} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProduct(body: CreateProductReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceCreatedRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProduct(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductCatalogApi.createProduct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Permanently delete a product from the catalog. Requires admin privileges.
         * @summary Delete product
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProduct(productId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProduct(productId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductCatalogApi.deleteProduct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve detailed information about a specific product by its unique identifier
         * @summary Get product by ID
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProduct(productId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProductRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProduct(productId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductCatalogApi.getProduct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve multiple products by providing a list of product IDs as query parameters
         * @summary Get products by IDs
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProducts(ids: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProductRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProducts(ids, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductCatalogApi.getProducts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Completely replace existing product with new data. Requires admin privileges.
         * @summary Replace product
         * @param {string} productId 
         * @param {CreateProductReq} createProductReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceProduct(productId: string, createProductReq: CreateProductReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceProduct(productId, createProductReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductCatalogApi.replaceProduct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve list of all available products in the catalog with pagination support
         * @summary Search all products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchProducts(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductListRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchProducts(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductCatalogApi.searchProducts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update existing product with new data and optional image. Requires admin privileges.
         * @summary Update product
         * @param {UpdateProductReq} body 
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProduct(body: UpdateProductReq, productId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProduct(body, productId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductCatalogApi.updateProduct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductCatalogApi - factory interface
 * @export
 */
export const ProductCatalogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductCatalogApiFp(configuration)
    return {
        /**
         * Create a new product with details and optional image upload. Requires admin privileges.
         * @summary Create new product
         * @param {CreateProductReq} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct(body: CreateProductReq, options?: RawAxiosRequestConfig): AxiosPromise<ResourceCreatedRes> {
            return localVarFp.createProduct(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Permanently delete a product from the catalog. Requires admin privileges.
         * @summary Delete product
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct(productId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteProduct(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve detailed information about a specific product by its unique identifier
         * @summary Get product by ID
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct(productId: string, options?: RawAxiosRequestConfig): AxiosPromise<GetProductRes> {
            return localVarFp.getProduct(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve multiple products by providing a list of product IDs as query parameters
         * @summary Get products by IDs
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProducts(ids: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<GetProductRes> {
            return localVarFp.getProducts(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Completely replace existing product with new data. Requires admin privileges.
         * @summary Replace product
         * @param {string} productId 
         * @param {CreateProductReq} createProductReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceProduct(productId: string, createProductReq: CreateProductReq, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.replaceProduct(productId, createProductReq, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve list of all available products in the catalog with pagination support
         * @summary Search all products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchProducts(options?: RawAxiosRequestConfig): AxiosPromise<ProductListRes> {
            return localVarFp.searchProducts(options).then((request) => request(axios, basePath));
        },
        /**
         * Update existing product with new data and optional image. Requires admin privileges.
         * @summary Update product
         * @param {UpdateProductReq} body 
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct(body: UpdateProductReq, productId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateProduct(body, productId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductCatalogApi - interface
 * @export
 * @interface ProductCatalogApi
 */
export interface ProductCatalogApiInterface {
    /**
     * Create a new product with details and optional image upload. Requires admin privileges.
     * @summary Create new product
     * @param {CreateProductReq} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCatalogApiInterface
     */
    createProduct(body: CreateProductReq, options?: RawAxiosRequestConfig): AxiosPromise<ResourceCreatedRes>;

    /**
     * Permanently delete a product from the catalog. Requires admin privileges.
     * @summary Delete product
     * @param {string} productId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCatalogApiInterface
     */
    deleteProduct(productId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Retrieve detailed information about a specific product by its unique identifier
     * @summary Get product by ID
     * @param {string} productId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCatalogApiInterface
     */
    getProduct(productId: string, options?: RawAxiosRequestConfig): AxiosPromise<GetProductRes>;

    /**
     * Retrieve multiple products by providing a list of product IDs as query parameters
     * @summary Get products by IDs
     * @param {Array<string>} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCatalogApiInterface
     */
    getProducts(ids: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<GetProductRes>;

    /**
     * Completely replace existing product with new data. Requires admin privileges.
     * @summary Replace product
     * @param {string} productId 
     * @param {CreateProductReq} createProductReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCatalogApiInterface
     */
    replaceProduct(productId: string, createProductReq: CreateProductReq, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Retrieve list of all available products in the catalog with pagination support
     * @summary Search all products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCatalogApiInterface
     */
    searchProducts(options?: RawAxiosRequestConfig): AxiosPromise<ProductListRes>;

    /**
     * Update existing product with new data and optional image. Requires admin privileges.
     * @summary Update product
     * @param {UpdateProductReq} body 
     * @param {string} productId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCatalogApiInterface
     */
    updateProduct(body: UpdateProductReq, productId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ProductCatalogApi - object-oriented interface
 * @export
 * @class ProductCatalogApi
 * @extends {BaseAPI}
 */
export class ProductCatalogApi extends BaseAPI implements ProductCatalogApiInterface {
    /**
     * Create a new product with details and optional image upload. Requires admin privileges.
     * @summary Create new product
     * @param {CreateProductReq} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCatalogApi
     */
    public createProduct(body: CreateProductReq, options?: RawAxiosRequestConfig) {
        return ProductCatalogApiFp(this.configuration).createProduct(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Permanently delete a product from the catalog. Requires admin privileges.
     * @summary Delete product
     * @param {string} productId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCatalogApi
     */
    public deleteProduct(productId: string, options?: RawAxiosRequestConfig) {
        return ProductCatalogApiFp(this.configuration).deleteProduct(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve detailed information about a specific product by its unique identifier
     * @summary Get product by ID
     * @param {string} productId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCatalogApi
     */
    public getProduct(productId: string, options?: RawAxiosRequestConfig) {
        return ProductCatalogApiFp(this.configuration).getProduct(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve multiple products by providing a list of product IDs as query parameters
     * @summary Get products by IDs
     * @param {Array<string>} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCatalogApi
     */
    public getProducts(ids: Array<string>, options?: RawAxiosRequestConfig) {
        return ProductCatalogApiFp(this.configuration).getProducts(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Completely replace existing product with new data. Requires admin privileges.
     * @summary Replace product
     * @param {string} productId 
     * @param {CreateProductReq} createProductReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCatalogApi
     */
    public replaceProduct(productId: string, createProductReq: CreateProductReq, options?: RawAxiosRequestConfig) {
        return ProductCatalogApiFp(this.configuration).replaceProduct(productId, createProductReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve list of all available products in the catalog with pagination support
     * @summary Search all products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCatalogApi
     */
    public searchProducts(options?: RawAxiosRequestConfig) {
        return ProductCatalogApiFp(this.configuration).searchProducts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update existing product with new data and optional image. Requires admin privileges.
     * @summary Update product
     * @param {UpdateProductReq} body 
     * @param {string} productId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCatalogApi
     */
    public updateProduct(body: UpdateProductReq, productId: string, options?: RawAxiosRequestConfig) {
        return ProductCatalogApiFp(this.configuration).updateProduct(body, productId, options).then((request) => request(this.axios, this.basePath));
    }
}



