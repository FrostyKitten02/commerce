/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface HealthReport
 */
export interface HealthReport {
    /**
     * 
     * @type {string}
     * @memberof HealthReport
     */
    'overallStatus'?: string;
    /**
     * 
     * @type {number}
     * @memberof HealthReport
     */
    'totalServices'?: number;
    /**
     * 
     * @type {number}
     * @memberof HealthReport
     */
    'servicesUp'?: number;
    /**
     * 
     * @type {number}
     * @memberof HealthReport
     */
    'servicesDown'?: number;
    /**
     * 
     * @type {string}
     * @memberof HealthReport
     */
    'reportTime'?: string;
    /**
     * 
     * @type {Array<ServiceStatus>}
     * @memberof HealthReport
     */
    'services'?: Array<ServiceStatus>;
}
/**
 * 
 * @export
 * @interface ServiceStatus
 */
export interface ServiceStatus {
    /**
     * 
     * @type {string}
     * @memberof ServiceStatus
     */
    'serviceName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceStatus
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceStatus
     */
    'url'?: string;
    /**
     * 
     * @type {number}
     * @memberof ServiceStatus
     */
    'responseTime'?: number;
    /**
     * 
     * @type {string}
     * @memberof ServiceStatus
     */
    'lastChecked'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceStatus
     */
    'errorMessage'?: string;
}

/**
 * HealthMonitorApi - axios parameter creator
 * @export
 */
export const HealthMonitorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns health status for a specific service
         * @summary Check specific service health
         * @param {string} serviceName Name of the service to check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkSpecificService: async (serviceName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceName' is not null or undefined
            assertParamExists('checkSpecificService', 'serviceName', serviceName)
            const localVarPath = `/api/health/service/{serviceName}`
                .replace(`{${"serviceName"}}`, encodeURIComponent(String(serviceName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns list of all services being monitored
         * @summary Get available services
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableServices: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/health/services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns health status report for all monitored microservices
         * @summary Get overall health status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHealthStatus: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/health/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthMonitorApi - functional programming interface
 * @export
 */
export const HealthMonitorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthMonitorApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns health status for a specific service
         * @summary Check specific service health
         * @param {string} serviceName Name of the service to check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkSpecificService(serviceName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkSpecificService(serviceName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthMonitorApi.checkSpecificService']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns list of all services being monitored
         * @summary Get available services
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableServices(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvailableServices(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthMonitorApi.getAvailableServices']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns health status report for all monitored microservices
         * @summary Get overall health status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHealthStatus(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHealthStatus(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthMonitorApi.getHealthStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HealthMonitorApi - factory interface
 * @export
 */
export const HealthMonitorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthMonitorApiFp(configuration)
    return {
        /**
         * Returns health status for a specific service
         * @summary Check specific service health
         * @param {string} serviceName Name of the service to check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkSpecificService(serviceName: string, options?: RawAxiosRequestConfig): AxiosPromise<ServiceStatus> {
            return localVarFp.checkSpecificService(serviceName, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns list of all services being monitored
         * @summary Get available services
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableServices(options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.getAvailableServices(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns health status report for all monitored microservices
         * @summary Get overall health status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHealthStatus(options?: RawAxiosRequestConfig): AxiosPromise<HealthReport> {
            return localVarFp.getHealthStatus(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthMonitorApi - interface
 * @export
 * @interface HealthMonitorApi
 */
export interface HealthMonitorApiInterface {
    /**
     * Returns health status for a specific service
     * @summary Check specific service health
     * @param {string} serviceName Name of the service to check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthMonitorApiInterface
     */
    checkSpecificService(serviceName: string, options?: RawAxiosRequestConfig): AxiosPromise<ServiceStatus>;

    /**
     * Returns list of all services being monitored
     * @summary Get available services
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthMonitorApiInterface
     */
    getAvailableServices(options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }>;

    /**
     * Returns health status report for all monitored microservices
     * @summary Get overall health status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthMonitorApiInterface
     */
    getHealthStatus(options?: RawAxiosRequestConfig): AxiosPromise<HealthReport>;

}

/**
 * HealthMonitorApi - object-oriented interface
 * @export
 * @class HealthMonitorApi
 * @extends {BaseAPI}
 */
export class HealthMonitorApi extends BaseAPI implements HealthMonitorApiInterface {
    /**
     * Returns health status for a specific service
     * @summary Check specific service health
     * @param {string} serviceName Name of the service to check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthMonitorApi
     */
    public checkSpecificService(serviceName: string, options?: RawAxiosRequestConfig) {
        return HealthMonitorApiFp(this.configuration).checkSpecificService(serviceName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns list of all services being monitored
     * @summary Get available services
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthMonitorApi
     */
    public getAvailableServices(options?: RawAxiosRequestConfig) {
        return HealthMonitorApiFp(this.configuration).getAvailableServices(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns health status report for all monitored microservices
     * @summary Get overall health status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthMonitorApi
     */
    public getHealthStatus(options?: RawAxiosRequestConfig) {
        return HealthMonitorApiFp(this.configuration).getHealthStatus(options).then((request) => request(this.axios, this.basePath));
    }
}



