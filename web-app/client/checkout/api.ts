/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface OrderCreatedRes
 */
export interface OrderCreatedRes {
    /**
     * 
     * @type {string}
     * @memberof OrderCreatedRes
     */
    'orderId'?: string;
}
/**
 * 
 * @export
 * @interface OrderDto
 */
export interface OrderDto {
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'cartId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'shippingAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'shippingCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'shippingPostalCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'shippingCountry'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderDto
     */
    'totalAmount'?: number;
    /**
     * 
     * @type {Array<OrderItemDto>}
     * @memberof OrderDto
     */
    'orderItems'?: Array<OrderItemDto>;
}
/**
 * 
 * @export
 * @interface OrderItemDto
 */
export interface OrderItemDto {
    /**
     * 
     * @type {string}
     * @memberof OrderItemDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemDto
     */
    'orderId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemDto
     */
    'productId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemDto
     */
    'productName'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemDto
     */
    'productSku'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderItemDto
     */
    'unitPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemDto
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemDto
     */
    'lineTotal'?: number;
}
/**
 * 
 * @export
 * @interface SubmitCartReq
 */
export interface SubmitCartReq {
    /**
     * 
     * @type {string}
     * @memberof SubmitCartReq
     */
    'cartId': string;
    /**
     * 
     * @type {string}
     * @memberof SubmitCartReq
     */
    'shippingAddress': string;
    /**
     * 
     * @type {string}
     * @memberof SubmitCartReq
     */
    'shippingCity': string;
    /**
     * 
     * @type {string}
     * @memberof SubmitCartReq
     */
    'shippingPostalCode': string;
    /**
     * 
     * @type {string}
     * @memberof SubmitCartReq
     */
    'shippingCountry': string;
}

/**
 * CheckoutControllerApi - axios parameter creator
 * @export
 */
export const CheckoutControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserOrders: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/checkout/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SubmitCartReq} submitCartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitCart: async (submitCartReq: SubmitCartReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'submitCartReq' is not null or undefined
            assertParamExists('submitCart', 'submitCartReq', submitCartReq)
            const localVarPath = `/checkout/submit-cart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(submitCartReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CheckoutControllerApi - functional programming interface
 * @export
 */
export const CheckoutControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CheckoutControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserOrders(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserOrders(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CheckoutControllerApi.getUserOrders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SubmitCartReq} submitCartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitCart(submitCartReq: SubmitCartReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderCreatedRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitCart(submitCartReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CheckoutControllerApi.submitCart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CheckoutControllerApi - factory interface
 * @export
 */
export const CheckoutControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CheckoutControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserOrders(options?: RawAxiosRequestConfig): AxiosPromise<Array<OrderDto>> {
            return localVarFp.getUserOrders(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubmitCartReq} submitCartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitCart(submitCartReq: SubmitCartReq, options?: RawAxiosRequestConfig): AxiosPromise<OrderCreatedRes> {
            return localVarFp.submitCart(submitCartReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CheckoutControllerApi - interface
 * @export
 * @interface CheckoutControllerApi
 */
export interface CheckoutControllerApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutControllerApiInterface
     */
    getUserOrders(options?: RawAxiosRequestConfig): AxiosPromise<Array<OrderDto>>;

    /**
     * 
     * @param {SubmitCartReq} submitCartReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutControllerApiInterface
     */
    submitCart(submitCartReq: SubmitCartReq, options?: RawAxiosRequestConfig): AxiosPromise<OrderCreatedRes>;

}

/**
 * CheckoutControllerApi - object-oriented interface
 * @export
 * @class CheckoutControllerApi
 * @extends {BaseAPI}
 */
export class CheckoutControllerApi extends BaseAPI implements CheckoutControllerApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutControllerApi
     */
    public getUserOrders(options?: RawAxiosRequestConfig) {
        return CheckoutControllerApiFp(this.configuration).getUserOrders(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SubmitCartReq} submitCartReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutControllerApi
     */
    public submitCart(submitCartReq: SubmitCartReq, options?: RawAxiosRequestConfig) {
        return CheckoutControllerApiFp(this.configuration).submitCart(submitCartReq, options).then((request) => request(this.axios, this.basePath));
    }
}



