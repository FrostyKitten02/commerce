/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AddToCartReq
 */
export interface AddToCartReq {
    /**
     * 
     * @type {string}
     * @memberof AddToCartReq
     */
    'productId': string;
    /**
     * 
     * @type {number}
     * @memberof AddToCartReq
     */
    'quantity': number;
}
/**
 * 
 * @export
 * @interface CartDto
 */
export interface CartDto {
    /**
     * 
     * @type {string}
     * @memberof CartDto
     */
    'id'?: string;
    /**
     * 
     * @type {Array<CartProductDto>}
     * @memberof CartDto
     */
    'cartProducts'?: Array<CartProductDto>;
    /**
     * 
     * @type {number}
     * @memberof CartDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface CartProductDto
 */
export interface CartProductDto {
    /**
     * 
     * @type {string}
     * @memberof CartProductDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CartProductDto
     */
    'productId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CartProductDto
     */
    'pictureId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CartProductDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CartProductDto
     */
    'sku'?: string;
    /**
     * 
     * @type {number}
     * @memberof CartProductDto
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof CartProductDto
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof CartProductDto
     */
    'lineTotal'?: number;
}
/**
 * 
 * @export
 * @interface GetCartRes
 */
export interface GetCartRes {
    /**
     * 
     * @type {CartDto}
     * @memberof GetCartRes
     */
    'cart'?: CartDto;
}

/**
 * ShoppingCartApi - axios parameter creator
 * @export
 */
export const ShoppingCartApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a product to the user\'s shopping cart with specified quantity
         * @summary Add item to cart
         * @param {string} cartId 
         * @param {AddToCartReq} addToCartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToCart: async (cartId: string, addToCartReq: AddToCartReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('addToCart', 'cartId', cartId)
            // verify required parameter 'addToCartReq' is not null or undefined
            assertParamExists('addToCart', 'addToCartReq', addToCartReq)
            const localVarPath = `/carts/{cartId}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addToCartReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete all items from the current authenticated user\'s shopping cart
         * @summary Clear user\'s cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCart: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/carts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the current authenticated user\'s shopping cart with all items and total price
         * @summary Get user\'s cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCart: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/carts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a specific item completely from the user\'s shopping cart
         * @summary Remove item from cart
         * @param {string} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromCart: async (cartId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('removeFromCart', 'cartId', cartId)
            const localVarPath = `/carts/{cartId}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the quantity of a specific item in the user\'s shopping cart
         * @summary Update item quantity
         * @param {string} cartProductId 
         * @param {number} quantity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuantity: async (cartProductId: string, quantity: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartProductId' is not null or undefined
            assertParamExists('updateQuantity', 'cartProductId', cartProductId)
            // verify required parameter 'quantity' is not null or undefined
            assertParamExists('updateQuantity', 'quantity', quantity)
            const localVarPath = `/carts/product/{cartProductId}/{quantity}`
                .replace(`{${"cartProductId"}}`, encodeURIComponent(String(cartProductId)))
                .replace(`{${"quantity"}}`, encodeURIComponent(String(quantity)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShoppingCartApi - functional programming interface
 * @export
 */
export const ShoppingCartApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShoppingCartApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a product to the user\'s shopping cart with specified quantity
         * @summary Add item to cart
         * @param {string} cartId 
         * @param {AddToCartReq} addToCartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addToCart(cartId: string, addToCartReq: AddToCartReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addToCart(cartId, addToCartReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShoppingCartApi.addToCart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete all items from the current authenticated user\'s shopping cart
         * @summary Clear user\'s cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCart(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCart(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShoppingCartApi.deleteCart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the current authenticated user\'s shopping cart with all items and total price
         * @summary Get user\'s cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCart(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCartRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCart(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShoppingCartApi.getCart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove a specific item completely from the user\'s shopping cart
         * @summary Remove item from cart
         * @param {string} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFromCart(cartId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFromCart(cartId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShoppingCartApi.removeFromCart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the quantity of a specific item in the user\'s shopping cart
         * @summary Update item quantity
         * @param {string} cartProductId 
         * @param {number} quantity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQuantity(cartProductId: string, quantity: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQuantity(cartProductId, quantity, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShoppingCartApi.updateQuantity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ShoppingCartApi - factory interface
 * @export
 */
export const ShoppingCartApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShoppingCartApiFp(configuration)
    return {
        /**
         * Add a product to the user\'s shopping cart with specified quantity
         * @summary Add item to cart
         * @param {string} cartId 
         * @param {AddToCartReq} addToCartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToCart(cartId: string, addToCartReq: AddToCartReq, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addToCart(cartId, addToCartReq, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete all items from the current authenticated user\'s shopping cart
         * @summary Clear user\'s cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCart(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCart(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the current authenticated user\'s shopping cart with all items and total price
         * @summary Get user\'s cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCart(options?: RawAxiosRequestConfig): AxiosPromise<GetCartRes> {
            return localVarFp.getCart(options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a specific item completely from the user\'s shopping cart
         * @summary Remove item from cart
         * @param {string} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromCart(cartId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeFromCart(cartId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the quantity of a specific item in the user\'s shopping cart
         * @summary Update item quantity
         * @param {string} cartProductId 
         * @param {number} quantity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuantity(cartProductId: string, quantity: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateQuantity(cartProductId, quantity, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShoppingCartApi - interface
 * @export
 * @interface ShoppingCartApi
 */
export interface ShoppingCartApiInterface {
    /**
     * Add a product to the user\'s shopping cart with specified quantity
     * @summary Add item to cart
     * @param {string} cartId 
     * @param {AddToCartReq} addToCartReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApiInterface
     */
    addToCart(cartId: string, addToCartReq: AddToCartReq, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Delete all items from the current authenticated user\'s shopping cart
     * @summary Clear user\'s cart
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApiInterface
     */
    deleteCart(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Retrieve the current authenticated user\'s shopping cart with all items and total price
     * @summary Get user\'s cart
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApiInterface
     */
    getCart(options?: RawAxiosRequestConfig): AxiosPromise<GetCartRes>;

    /**
     * Remove a specific item completely from the user\'s shopping cart
     * @summary Remove item from cart
     * @param {string} cartId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApiInterface
     */
    removeFromCart(cartId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Update the quantity of a specific item in the user\'s shopping cart
     * @summary Update item quantity
     * @param {string} cartProductId 
     * @param {number} quantity 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApiInterface
     */
    updateQuantity(cartProductId: string, quantity: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ShoppingCartApi - object-oriented interface
 * @export
 * @class ShoppingCartApi
 * @extends {BaseAPI}
 */
export class ShoppingCartApi extends BaseAPI implements ShoppingCartApiInterface {
    /**
     * Add a product to the user\'s shopping cart with specified quantity
     * @summary Add item to cart
     * @param {string} cartId 
     * @param {AddToCartReq} addToCartReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApi
     */
    public addToCart(cartId: string, addToCartReq: AddToCartReq, options?: RawAxiosRequestConfig) {
        return ShoppingCartApiFp(this.configuration).addToCart(cartId, addToCartReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete all items from the current authenticated user\'s shopping cart
     * @summary Clear user\'s cart
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApi
     */
    public deleteCart(options?: RawAxiosRequestConfig) {
        return ShoppingCartApiFp(this.configuration).deleteCart(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the current authenticated user\'s shopping cart with all items and total price
     * @summary Get user\'s cart
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApi
     */
    public getCart(options?: RawAxiosRequestConfig) {
        return ShoppingCartApiFp(this.configuration).getCart(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a specific item completely from the user\'s shopping cart
     * @summary Remove item from cart
     * @param {string} cartId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApi
     */
    public removeFromCart(cartId: string, options?: RawAxiosRequestConfig) {
        return ShoppingCartApiFp(this.configuration).removeFromCart(cartId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the quantity of a specific item in the user\'s shopping cart
     * @summary Update item quantity
     * @param {string} cartProductId 
     * @param {number} quantity 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApi
     */
    public updateQuantity(cartProductId: string, quantity: number, options?: RawAxiosRequestConfig) {
        return ShoppingCartApiFp(this.configuration).updateQuantity(cartProductId, quantity, options).then((request) => request(this.axios, this.basePath));
    }
}



