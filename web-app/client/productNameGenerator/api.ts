/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface GenerateNameRequest
 */
export interface GenerateNameRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof GenerateNameRequest
     */
    'keywords'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GenerateNameRequest
     */
    'category'?: string;
    /**
     * 
     * @type {number}
     * @memberof GenerateNameRequest
     */
    'count'?: number;
}
/**
 * 
 * @export
 * @interface GenerateNameResponse
 */
export interface GenerateNameResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof GenerateNameResponse
     */
    'suggestions'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GenerateNameResponse
     */
    'category'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenerateNameResponse
     */
    'usedKeywords'?: Array<string>;
}

/**
 * ProductNameGeneratorApi - axios parameter creator
 * @export
 */
export const ProductNameGeneratorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generate creative product names based on keywords and category
         * @summary Generate product names
         * @param {GenerateNameRequest} generateNameRequest Request containing keywords, category, and count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateProductName: async (generateNameRequest: GenerateNameRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'generateNameRequest' is not null or undefined
            assertParamExists('generateProductName', 'generateNameRequest', generateNameRequest)
            const localVarPath = `/api/generate-name`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(generateNameRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate product names using query parameters for easy testing
         * @summary Generate product names (simple)
         * @param {string} [keywords] Comma-separated keywords
         * @param {string} [category] Product category
         * @param {number} [count] Number of suggestions to generate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateSimpleProductName: async (keywords?: string, category?: string, count?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/generate-name/simple`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keywords !== undefined) {
                localVarQueryParameter['keywords'] = keywords;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns list of supported product categories
         * @summary Get available categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableCategories: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Simple health check endpoint
         * @summary Health check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        health: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductNameGeneratorApi - functional programming interface
 * @export
 */
export const ProductNameGeneratorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductNameGeneratorApiAxiosParamCreator(configuration)
    return {
        /**
         * Generate creative product names based on keywords and category
         * @summary Generate product names
         * @param {GenerateNameRequest} generateNameRequest Request containing keywords, category, and count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateProductName(generateNameRequest: GenerateNameRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerateNameResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateProductName(generateNameRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductNameGeneratorApi.generateProductName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generate product names using query parameters for easy testing
         * @summary Generate product names (simple)
         * @param {string} [keywords] Comma-separated keywords
         * @param {string} [category] Product category
         * @param {number} [count] Number of suggestions to generate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateSimpleProductName(keywords?: string, category?: string, count?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerateNameResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateSimpleProductName(keywords, category, count, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductNameGeneratorApi.generateSimpleProductName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns list of supported product categories
         * @summary Get available categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableCategories(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvailableCategories(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductNameGeneratorApi.getAvailableCategories']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Simple health check endpoint
         * @summary Health check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async health(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.health(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductNameGeneratorApi.health']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductNameGeneratorApi - factory interface
 * @export
 */
export const ProductNameGeneratorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductNameGeneratorApiFp(configuration)
    return {
        /**
         * Generate creative product names based on keywords and category
         * @summary Generate product names
         * @param {GenerateNameRequest} generateNameRequest Request containing keywords, category, and count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateProductName(generateNameRequest: GenerateNameRequest, options?: RawAxiosRequestConfig): AxiosPromise<GenerateNameResponse> {
            return localVarFp.generateProductName(generateNameRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate product names using query parameters for easy testing
         * @summary Generate product names (simple)
         * @param {string} [keywords] Comma-separated keywords
         * @param {string} [category] Product category
         * @param {number} [count] Number of suggestions to generate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateSimpleProductName(keywords?: string, category?: string, count?: number, options?: RawAxiosRequestConfig): AxiosPromise<GenerateNameResponse> {
            return localVarFp.generateSimpleProductName(keywords, category, count, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns list of supported product categories
         * @summary Get available categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableCategories(options?: RawAxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.getAvailableCategories(options).then((request) => request(axios, basePath));
        },
        /**
         * Simple health check endpoint
         * @summary Health check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        health(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.health(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductNameGeneratorApi - interface
 * @export
 * @interface ProductNameGeneratorApi
 */
export interface ProductNameGeneratorApiInterface {
    /**
     * Generate creative product names based on keywords and category
     * @summary Generate product names
     * @param {GenerateNameRequest} generateNameRequest Request containing keywords, category, and count
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductNameGeneratorApiInterface
     */
    generateProductName(generateNameRequest: GenerateNameRequest, options?: RawAxiosRequestConfig): AxiosPromise<GenerateNameResponse>;

    /**
     * Generate product names using query parameters for easy testing
     * @summary Generate product names (simple)
     * @param {string} [keywords] Comma-separated keywords
     * @param {string} [category] Product category
     * @param {number} [count] Number of suggestions to generate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductNameGeneratorApiInterface
     */
    generateSimpleProductName(keywords?: string, category?: string, count?: number, options?: RawAxiosRequestConfig): AxiosPromise<GenerateNameResponse>;

    /**
     * Returns list of supported product categories
     * @summary Get available categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductNameGeneratorApiInterface
     */
    getAvailableCategories(options?: RawAxiosRequestConfig): AxiosPromise<Array<string>>;

    /**
     * Simple health check endpoint
     * @summary Health check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductNameGeneratorApiInterface
     */
    health(options?: RawAxiosRequestConfig): AxiosPromise<string>;

}

/**
 * ProductNameGeneratorApi - object-oriented interface
 * @export
 * @class ProductNameGeneratorApi
 * @extends {BaseAPI}
 */
export class ProductNameGeneratorApi extends BaseAPI implements ProductNameGeneratorApiInterface {
    /**
     * Generate creative product names based on keywords and category
     * @summary Generate product names
     * @param {GenerateNameRequest} generateNameRequest Request containing keywords, category, and count
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductNameGeneratorApi
     */
    public generateProductName(generateNameRequest: GenerateNameRequest, options?: RawAxiosRequestConfig) {
        return ProductNameGeneratorApiFp(this.configuration).generateProductName(generateNameRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate product names using query parameters for easy testing
     * @summary Generate product names (simple)
     * @param {string} [keywords] Comma-separated keywords
     * @param {string} [category] Product category
     * @param {number} [count] Number of suggestions to generate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductNameGeneratorApi
     */
    public generateSimpleProductName(keywords?: string, category?: string, count?: number, options?: RawAxiosRequestConfig) {
        return ProductNameGeneratorApiFp(this.configuration).generateSimpleProductName(keywords, category, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns list of supported product categories
     * @summary Get available categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductNameGeneratorApi
     */
    public getAvailableCategories(options?: RawAxiosRequestConfig) {
        return ProductNameGeneratorApiFp(this.configuration).getAvailableCategories(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Simple health check endpoint
     * @summary Health check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductNameGeneratorApi
     */
    public health(options?: RawAxiosRequestConfig) {
        return ProductNameGeneratorApiFp(this.configuration).health(options).then((request) => request(this.axios, this.basePath));
    }
}



